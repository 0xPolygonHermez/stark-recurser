pragma circom 2.1.0;
pragma custom_templates;

<% for (let i = 0; i < verifierFilenames.length; ++i) { -%>
    include "<%- verifierFilenames[i] %>";
<% } -%>

<%- include('src/vadcop/helpers/templates/calculate_hashes.circom.ejs', { starkInfo, vadcopInfo }); %>

template Main() {

<%- include('src/main_templates/define_stark_inputs.circom.ejs', { prefix: "sv", starkInfo, nPublics: vadcopInfo.nPublics }); %>

    signal input challenges[<%- vadcopInfo.numChallenges.reduce((nc, acc) => nc + acc, 0) + 4 %>][3];
    signal input challengesFRISteps[<%- vadcopInfo.stepsFRI.length  + 1 %>][3];
   
<%- include('src/main_templates/vadcop/define_vadcop_inputs.circom.ejs', { vadcopInfo, starkInfo, prefix: "", subproofId: starkInfo.subproofId, options: {...options, isInput: false} }); %>

<%- include('src/main_templates/assign_stark_inputs.circom.ejs', { componentName: "sV", prefix: "sv", starkInfo, nPublics: vadcopInfo.nPublics,  options: { addPublics: true } }); %>

<%- include('src/main_templates/vadcop/init_vadcop_inputs.circom.ejs', { componentName: "sV", prefix: "sv", subproofId: starkInfo.subproofId, starkInfo, vadcopInfo }); %>

}

component main {public [sv_publics, challenges, challengesFRISteps]} = Main();
