pragma circom 2.1.0;
pragma custom_templates;

<% for (let i = 0; i < verifierFilenames.length; ++i) { -%>
    include "<%- verifierFilenames[i] %>";
<% } -%>

<%- include('src/vadcop/helpers/templates/calculate_hashes.circom.ejs', { starkInfo, vadcopInfo }); %>

template Compressor() {

<%  if(vadcopInfo.nPublics > 0) { -%>
    signal input publics[<%- vadcopInfo.nPublics %>];
<%  } -%>

<%  if(vadcopInfo.numProofValues > 0) { -%>
    signal input proofValues[<%- vadcopInfo.numProofValues %>][3];
<%  } -%>

    signal input globalChallenge[3];
   
<%- include('src/main_templates/vadcop/define_vadcop_inputs.circom.ejs', { vadcopInfo, starkInfo, prefix: "sv", airgroupId: starkInfo.airgroupId, options: {...options, isInput: false} }); %>

<%- include('src/main_templates/define_stark_inputs.circom.ejs', { prefix: "", starkInfo, nPublics: vadcopInfo.nPublics, options: { addPublics: false} }); %>

<%- include('src/main_templates/assign_stark_inputs.circom.ejs', { componentName: "sV", prefix: "", starkInfo, nPublics: vadcopInfo.nPublics,  options: { addPublics: false } }); %>

<%  if(vadcopInfo.nPublics > 0) { -%>
    for (var i=0; i< <%- vadcopInfo.nPublics %>; i++) {
        sV.publics[i] <== publics[i];
    }
<%  } -%>

<%- include('src/main_templates/vadcop/init_vadcop_inputs.circom.ejs', { componentName: "sV", prefix: "sv", prefixStark: "", airgroupId: starkInfo.airgroupId, starkInfo, vadcopInfo }); %>

}

<%  let pubNames = []; -%>
<%    if(vadcopInfo.nPublics > 0) pubNames.push("publics"); -%>
<%    if(vadcopInfo.numProofValues > 0) pubNames.push("proofValues"); -%>
<%    pubNames.push("globalChallenge"); -%>
component main {public [<%- pubNames.join(", ") %>]} = Compressor();
