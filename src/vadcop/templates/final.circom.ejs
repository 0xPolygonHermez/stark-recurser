pragma circom 2.1.0;
pragma custom_templates;

<% for (let i = 0; i < verifierFilenames.length; ++i) { -%>
include "<%- verifierFilenames[i] %>";
<% } -%>
include "iszero.circom";
include "select_vk.circom";

<%- include('src/vadcop/helpers/templates/verify_global_challenge.circom.ejs', { vadcopInfo }); %>

<%- include('src/vadcop/helpers/templates/verify_global_constraints.circom.ejs', { vadcopInfo }); %>

template Final() {

    signal input publics[<%- vadcopInfo.nPublics %>];

    signal input challenges[<%- vadcopInfo.numChallenges.reduce((nc, acc) => nc + acc, 0) + 4 %>][3];
    signal input challengesFRISteps[<%- vadcopInfo.stepsFRI.length + 1%>][3];

<%  for(let i = 0; i < vadcopInfo.aggTypes.length; ++i) { -%>
<%- include('src/main_templates/define_stark_inputs.circom.ejs', { prefix: `s${i}`, starkInfo: starkInfo[i], nPublics: vadcopInfo.nPublics, options: { addPublics: false } }); %>
<%- include('src/main_templates/vadcop/define_vadcop_inputs.circom.ejs', { prefix: `s${i}_sv`, vadcopInfo, starkInfo: starkInfo[i], subproofId: i, options: {...options, addPublics: false, isInput: true, isAggregation: false } }); %>
<%  } -%>

<%  for(let i = 0; i < vadcopInfo.aggTypes.length; ++i) { -%>
<%- include('src/main_templates/assign_stark_inputs.circom.ejs', { componentName: `sV${i}`, prefix: `s${i}`, starkInfo: starkInfo[i], nPublics: vadcopInfo.nPublics, options }); %>
<%- include('src/main_templates/vadcop/assign_vadcop_inputs.circom.ejs', { componentName: `sV${i}`, prefix: `s${i}_sv`, prefixStark: `s${i}`, subproofId:i, vadcopInfo, options: { addPrefixAggTypes: true, setEnableInput: vadcopInfo.aggTypes.length > 1  } }); %>

    var s<%- i %>_sv_rootCAgg[4] = [<%- aggregatedVK[i].join(",") %>];
    var s<%- i %>_sv_rootCBasics[<%- vadcopInfo.airs[i].length %>][4];

<% for(let j = 0; j < vadcopInfo.airs[i].length; j++) { -%>
    s<%- i %>_sv_rootCBasics[<%- j %>] = [<%- basicVK[i][j].join(",") %>];
<% } -%>

<%  if(vadcopInfo.aggTypes.length > 1) { -%>
    sV<%- i %>.rootC <== SelectVerificationKeyNull(<%- vadcopInfo.airs[i].length %>)(s<%- i %>_sv_circuitType, s<%- i %>_sv_rootCBasics, s<%- i %>_sv_rootCAgg);
<%  } else { -%> 
    sV<%- i %>.rootC <== SelectVerificationKeyNull(<%- vadcopInfo.airs[i].length %>)(s<%- i %>_sv_circuitType, s<%- i %>_sv_rootCBasics, s<%- i %>_sv_rootCAgg);
<%  } -%>

    for (var i=0; i<4; i++) {
        sV<%- i %>.publics[<%- starkInfo[i].nPublics - 4 %> + i] <== s<%- i %>_sv_rootCAgg[i];
    }
<%  } -%>

    // Calculate transcript and check that matches with the global challenges
    component verifyChallenges = VerifyGlobalChallenges();
    verifyChallenges.challenges <== challenges;
    verifyChallenges.challengesFRISteps <== challengesFRISteps;
    verifyChallenges.publics <== publics;
<%  for(let i = 0; i < vadcopInfo.aggTypes.length; ++i) { -%>
    verifyChallenges.rootC[<%- i %>] <== s<%- i %>_sv_rootC;
<%      for (let j = 0; j < vadcopInfo.numChallenges.length + 1; ++j) { -%>
    verifyChallenges.root<%- j + 1 %>[<%- i %>] <== s<%- i %>_sv_root<%- j+1 %>;
<%      } -%>
    verifyChallenges.evalsHash[<%- i %>] <== s<%- i %>_sv_evalsHash;
<%      for (let j = 1; j < vadcopInfo.stepsFRI.length; ++j) { -%>
    verifyChallenges.s<%- j %>_root[<%- i %>] <== s<%- i %>_sv_s<%- j %>_root;
<%      } -%>
    verifyChallenges.finalPolHash[<%- i %>] <== s<%- i %>_sv_finalPolHash;
<%  } -%>

    // Verify global constraints
    component verifyGlobalConstraints = VerifyGlobalConstraints();
    verifyGlobalConstraints.publics <== publics;
<%  for(let i = 0; i < vadcopInfo.aggTypes.length; ++i) { -%>
    verifyGlobalConstraints.s<%- i %>_subproofValues <== s<%- i %>_sv_subproofValues;
<%  } -%>
}

component main {public [publics]} = Final();
