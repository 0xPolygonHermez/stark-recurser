pragma circom 2.1.0;
pragma custom_templates;

<% for (let i = 0; i < verifierFilenames.length; ++i) { -%>
include "<%- verifierFilenames[i] %>";
<% } -%>
include "iszero.circom";
include "select_vk.circom";

<%- include('src/vadcop/helpers/templates/verify_global_challenge.circom.ejs', { vadcopInfo }); %>

<%- include('src/vadcop/helpers/templates/verify_global_constraints.circom.ejs', { vadcopInfo }); %>

template Final() {

<%  if(vadcopInfo.nPublics > 0) { -%>
    signal input publics[<%- vadcopInfo.nPublics %>];
<%  } -%>

<%  if(vadcopInfo.numProofValues > 0) { -%>
    signal input proofValues[<%- vadcopInfo.numProofValues %>][3];
<%  } -%>

    signal input globalChallenge[3];

<%  for(let i = 0; i < vadcopInfo.aggTypes.length; ++i) { -%>
<%  let starkInfoRecursive2 = (vadcopInfo.air_groups.length > 1) ? starkInfo[i] : starkInfo; -%>
<%- include('src/main_templates/define_stark_inputs.circom.ejs', { prefix: `s${i}`, starkInfo: starkInfoRecursive2, nPublics: vadcopInfo.nPublics, options: { addPublics: false } }); %>
<%- include('src/main_templates/vadcop/define_vadcop_inputs.circom.ejs', { prefix: `s${i}_sv`, vadcopInfo, starkInfo: starkInfoRecursive2, airgroupId: i, options: {...options, addPublics: false, isInput: true, isAggregation: false } }); %>
<%  } -%>

<%  for(let i = 0; i < vadcopInfo.aggTypes.length; ++i) { -%>
<%  let starkInfoRecursive2 = (vadcopInfo.air_groups.length > 1) ? starkInfo[i] : starkInfo; -%>
<%- include('src/main_templates/assign_stark_inputs.circom.ejs', { componentName: `sV${i}`, prefix: `s${i}`, starkInfo: starkInfoRecursive2, nPublics: vadcopInfo.nPublics, options }); %>
<%- include('src/main_templates/vadcop/assign_vadcop_inputs.circom.ejs', { componentName: `sV${i}`, prefix: `s${i}_sv`, prefixStark: `s${i}`, airgroupId:i, vadcopInfo, options: { addPrefixAggTypes: true, setEnableInput: (vadcopInfo.air_groups.length > 1 || vadcopInfo.airs[0].length > 1)  } }); %>

    var s<%- i %>_sv_rootCAgg[4] = [<%- aggregatedVK[i].join(",") %>];
    var s<%- i %>_sv_rootCBasics[<%- vadcopInfo.airs[i].length %>][4];

<% for(let j = 0; j < vadcopInfo.airs[i].length; j++) { -%>
    s<%- i %>_sv_rootCBasics[<%- j %>] = [<%- basicVK[i][j].join(",") %>];
<% } -%>

<%  if(vadcopInfo.air_groups.length === 1 && vadcopInfo.airs[0].length === 1) { -%>
    sV<%- i %>.rootC <== SelectVerificationKey(<%- vadcopInfo.airs[i].length %>)(s<%- i %>_sv_circuitType, s<%- i %>_sv_rootCBasics, s<%- i %>_sv_rootCAgg);
<%  } else { -%> 
    sV<%- i %>.rootC <== SelectVerificationKeyNull(<%- vadcopInfo.airs[i].length %>)(s<%- i %>_sv_circuitType, s<%- i %>_sv_rootCBasics, s<%- i %>_sv_rootCAgg);
<%  } -%>

    for (var i=0; i<4; i++) {
        sV<%- i %>.publics[<%- starkInfoRecursive2.nPublics - 4 %> + i] <== s<%- i %>_sv_rootCAgg[i];
    }
<%  } -%>

    // Calculate transcript and check that matches with the global challenges
    component verifyChallenges = VerifyGlobalChallenges();
    verifyChallenges.globalChallenge <== globalChallenge;
<%  if(vadcopInfo.nPublics > 0) { -%>
    verifyChallenges.publics <== publics;
<%  } -%>
<%  if(vadcopInfo.proofValuesMap.length > 0) { -%>
    verifyChallenges.proofValues <== proofValues;
<%  } -%>
<%      for(let i = 0; i < vadcopInfo.aggTypes.length; ++i) { -%>
    verifyChallenges.hashStage1[<%- i %>] <== s<%- i %>_sv_root1;
<%      } -%>

    // Verify global constraints
    component verifyGlobalConstraints = VerifyGlobalConstraints();
<%  if(vadcopInfo.nPublics > 0) { -%>
    verifyGlobalConstraints.publics <== publics;
<%  } -%>
<%  if(vadcopInfo.proofValuesMap.length > 0) { -%>
    verifyGlobalConstraints.proofValues <== proofValues;
<%  } -%>
    verifyGlobalConstraints.globalChallenge <== globalChallenge;
<%  for(let i = 0; i < vadcopInfo.aggTypes.length; ++i) { -%>
<%  if(vadcopInfo.aggTypes[i].length > 0) { -%>
    verifyGlobalConstraints.s<%- i %>_airgroupvalues <== s<%- i %>_sv_airgroupvalues;
<%  } -%>
<%  } -%>
}

component main <%- vadcopInfo.nPublics > 0 ? "{public [publics]}" : ""%>= Final();
