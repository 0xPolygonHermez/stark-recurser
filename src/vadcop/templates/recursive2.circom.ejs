pragma circom 2.1.0;
pragma custom_templates;

include "select_vk.circom";
include "agg_values.circom";

<% for (let i = 0; i < verifierFilenames.length; ++i) { -%>
include "<%- verifierFilenames[i] %>";
<% } -%>


template Main() {
    var rootCBasics[<%- vadcopInfo.nAirs[starkInfo.subproofId] %>][4];

<% for(let i = 0; i < vadcopInfo.nAirs[starkInfo.subproofId]; ++i) { -%>
    rootCBasics[<%- i %>] = [<%- basicVK[i].join(",") %>];
<%  } -%>

    signal input publics[<%- starkInfo.nPublics %>];

    signal input challenges[<%- vadcopInfo.numChallenges.reduce((nc, acc) => nc + acc, 0) + 4 %>][3];
    signal input challengesFRISteps[<%- vadcopInfo.stepsFRI.length + 1%>][3];

    signal input rootCAgg[4];

<%- include('src/main_templates/define_stark_inputs.circom.ejs', { prefix: "a", starkInfo, nPublics: starkInfo.nPublics - 4 }); %>
<%- include('src/main_templates/define_stark_inputs.circom.ejs', { prefix: "b", starkInfo, nPublics: starkInfo.nPublics - 4 }); %>
   
<%- include('src/main_templates/vadcop/define_vadcop_inputs.circom.ejs', { prefix: "a_sv", vadcopInfo, starkInfo, options: {...options, isInput: true} }); %>
<%- include('src/main_templates/vadcop/define_vadcop_inputs.circom.ejs', { prefix: "b_sv", vadcopInfo, starkInfo, options: {...options, isInput: true} }); %>

<%- include('src/main_templates/vadcop/define_vadcop_inputs.circom.ejs', { prefix: "", vadcopInfo, starkInfo, options: {...options, isInput: false} }); %>

<%- include('src/main_templates/assign_stark_inputs.circom.ejs', { componentName: "vA", prefix: "a", starkInfo, nPublics: starkInfo.nPublics }); %>
<%- include('src/main_templates/assign_stark_inputs.circom.ejs', { componentName: "vB", prefix: "b", starkInfo, nPublics: starkInfo.nPublics }); %>

<%- include('src/main_templates/vadcop/assign_vadcop_inputs.circom.ejs', { componentName: "vA", vadcopInfo, prefix: "a_sv" }); %>
<%- include('src/main_templates/vadcop/assign_vadcop_inputs.circom.ejs', { componentName: "vB", vadcopInfo, prefix: "b_sv" }); %>

<% if(vadcopInfo.nAirs[starkInfo.subproofId] === 1) { -%>
    vA.rootC <== SelectVerificationKey()(a_circuitType, rootCBasics, rootCAgg);
    vB.rootC <== SelectVerificationKey()(b_circuitType, rootCBasics, rootCAgg);
<%  } else { -%>
    vA.rootC <== SelectVerificationKey(<%- vadcopInfo.nAirs[starkInfo.subproofId] %>)(a_sv_circuitType, rootCBasics, rootCAgg);
    vB.rootC <== SelectVerificationKey(<%- vadcopInfo.nAirs[starkInfo.subproofId] %>)(b_sv_circuitType, rootCBasics, rootCAgg);
<%  } -%>

<%- include('src/main_templates/vadcop/agg_vadcop_inputs.circom.ejs', { vadcopInfo, prefix1: "a_sv", prefix2: "b_sv" }); %>

}

component main {public [publics, challenges, challengesFRISteps, rootCAgg]} = Main();
