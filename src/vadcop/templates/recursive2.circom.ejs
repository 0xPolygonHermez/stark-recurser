pragma circom 2.1.0;
pragma custom_templates;

include "select_vk.circom";
include "agg_values.circom";

<% for (let i = 0; i < verifierFilenames.length; ++i) { -%>
include "<%- verifierFilenames[i] %>";
<% } -%>


template Recursive2() {
    var rootCBasics[<%- vadcopInfo.airs[airgroupId].length %>][4];

<% for(let i = 0; i < vadcopInfo.airs[airgroupId].length; ++i) { -%>
    rootCBasics[<%- i %>] = [<%- basicVK[i].join(",") %>];
<%  } -%>

<%- include('src/main_templates/vadcop/define_vadcop_inputs.circom.ejs', { prefix: "sv", vadcopInfo, airgroupId, starkInfo, options: {...options, isInput: false} }); %>

<%  if(vadcopInfo.nPublics > 0) { -%>
    signal input publics[<%- vadcopInfo.nPublics %>];
<%  } -%>

<%  if(vadcopInfo.numProofValues > 0) { -%>
    signal input proofValues[<%- vadcopInfo.numProofValues %>][3];
<%  } -%>

    signal input globalChallenge[3];

    signal input rootCAgg[4];

<%- include('src/main_templates/vadcop/define_vadcop_inputs.circom.ejs', { prefix: "a_sv", vadcopInfo, airgroupId, starkInfo, options: {...options, addPublics: false, isInput: true} }); %>
<%- include('src/main_templates/define_stark_inputs.circom.ejs', { prefix: "a", starkInfo, nPublics: vadcopInfo.nPublics, addPublics: false }); %>

<%- include('src/main_templates/vadcop/define_vadcop_inputs.circom.ejs', { prefix: "b_sv", vadcopInfo, airgroupId, starkInfo, options: {...options, addPublics: false, isInput: true} }); %>
<%- include('src/main_templates/define_stark_inputs.circom.ejs', { prefix: "b", starkInfo, nPublics: vadcopInfo.nPublics, addPublics: false }); %>

<%  if(vadcopInfo.aggTypes[airgroupId].length > 0) { -%>
    signal aggregationTypes[<%- vadcopInfo.aggTypes[airgroupId].length %>];
    for(var i = 0; i < <%- vadcopInfo.aggTypes[airgroupId].length %>; i++) {
        aggregationTypes[i] <== a_sv_aggregationTypes[i];
        a_sv_aggregationTypes[i] === b_sv_aggregationTypes[i];
    }
<%  } -%>
<%- include('src/main_templates/assign_stark_inputs.circom.ejs', { componentName: "vA", prefix: "a", starkInfo, nPublics: vadcopInfo.nPublics }); %>
<%- include('src/main_templates/assign_stark_inputs.circom.ejs', { componentName: "vB", prefix: "b", starkInfo, nPublics: vadcopInfo.nPublics }); %>

<%- include('src/main_templates/vadcop/assign_vadcop_inputs.circom.ejs', { componentName: "vA", vadcopInfo, prefix: "a_sv", prefixStark: "a", airgroupId, options: { setEnableInput: (vadcopInfo.air_groups.length > 1 || vadcopInfo.airs[0].length > 1)  } }); %>
<%- include('src/main_templates/vadcop/assign_vadcop_inputs.circom.ejs', { componentName: "vB", vadcopInfo, prefix: "b_sv", prefixStark: "b", airgroupId, options: { setEnableInput: (vadcopInfo.air_groups.length > 1 || vadcopInfo.airs[0].length > 1)  } }); %>

<% if(vadcopInfo.air_groups.length === 1 && vadcopInfo.airs[0].length === 1) { -%>
    vA.rootC <== SelectVerificationKey(<%- vadcopInfo.airs[airgroupId].length %>)(a_sv_circuitType, rootCBasics, rootCAgg);
    vB.rootC <== SelectVerificationKey(<%- vadcopInfo.airs[airgroupId].length %>)(b_sv_circuitType, rootCBasics, rootCAgg);
<%  } else { -%>
    vA.rootC <== SelectVerificationKeyNull(<%- vadcopInfo.airs[airgroupId].length %>)(a_sv_circuitType, rootCBasics, rootCAgg);
    vB.rootC <== SelectVerificationKeyNull(<%- vadcopInfo.airs[airgroupId].length %>)(b_sv_circuitType, rootCBasics, rootCAgg);
<%  } -%>

<%- include('src/main_templates/vadcop/agg_vadcop_inputs.circom.ejs', { vadcopInfo, prefix1: "a_sv", prefix2: "b_sv", prefix: "sv", airgroupId }); %>

    for (var i=0; i<4; i++) {
        vA.publics[<%- starkInfo.nPublics - 4 %> + i] <== rootCAgg[i];
        vB.publics[<%- starkInfo.nPublics - 4 %> + i] <== rootCAgg[i];
    }
}

<%  let pubNames = []; -%>
<%    if(vadcopInfo.nPublics > 0) pubNames.push("publics"); -%>
<%    if(vadcopInfo.numProofValues > 0) pubNames.push("proofValues"); -%>
<%    pubNames.push("globalChallenge"); -%>
<%    pubNames.push("rootCAgg"); -%>
component main {public [<%- pubNames.join(", ") %>]} = Recursive2();
