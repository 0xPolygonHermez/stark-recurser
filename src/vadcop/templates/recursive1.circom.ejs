pragma circom 2.1.0;
pragma custom_templates;

include "iszero.circom";
<% for (let i = 0; i < verifierFilenames.length; ++i) { -%>
include "<%- verifierFilenames[i] %>";
<% } -%>


<%  if(!options.hasCompressor) { -%>
<%-   include('src/vadcop/helpers/templates/calculate_hashes.circom.ejs', { starkInfo, vadcopInfo }); %>
<%  } -%>

<%  let publicsNames = []; -%>
template Recursive1() {

<%- include('src/main_templates/define_stark_inputs.circom.ejs', { prefix: "", starkInfo, nPublics: vadcopInfo.nPublics, options: { addPublics: false } }); %>

<%- include('src/main_templates/vadcop/define_vadcop_inputs.circom.ejs', { vadcopInfo, subproofId, prefix: "sv", starkInfo, options: { ...options, publicsNames, isInput: options.hasCompressor ? true : false  } }); %>

    signal input publics[<%- vadcopInfo.nPublics %>];
    signal input challenges[<%- vadcopInfo.numChallenges.reduce((nc, acc) => nc + acc, 0) + 4 %>][3];
    signal input challengesFRISteps[<%- vadcopInfo.stepsFRI.length + 1 %>][3];
   
    signal input rootCAgg[4];

<%- include('src/main_templates/assign_stark_inputs.circom.ejs', { componentName: "sV", prefix: "", starkInfo, nPublics: vadcopInfo.nPublics, options: { addPublics: false } }); %>
    
<%  if(!options.hasCompressor) { -%>
<%- include('src/main_templates/vadcop/init_vadcop_inputs.circom.ejs', { componentName: "sV", prefix: "sv", prefixStark: "", subproofId, starkInfo, vadcopInfo }); %>
<%  } else { -%>
<%- include('src/main_templates/vadcop/assign_vadcop_inputs.circom.ejs', { componentName: "sV", vadcopInfo, prefix: "sv", prefixStark: "", subproofId, options: { addPrefixAggTypes: true } }); %>
<%  } -%>
}

<%  if(!options.hasCompressor) { -%>
    component main {public [publics, challenges, challengesFRISteps, rootCAgg]} = Recursive1();
<%  } else { -%>
<%    publicsNames.push(...["publics", "challenges", "challengesFRISteps", "rootCAgg"]); -%>
component main {public [<%- publicsNames.join(", ") %>]} = Recursive1();

<%  } -%>