pragma circom 2.1.0;
pragma custom_templates;

include "iszero.circom";
<% for (let i = 0; i < verifierFilenames.length; ++i) { -%>
include "<%- verifierFilenames[i] %>";
<% } -%>


<%  if(!options.hasCompressor) { -%>
<%-   include('src/vadcop/helpers/templates/calculate_hashes.circom.ejs', { starkInfo, vadcopInfo }); %>
<%  } -%>

<%  let publicsNames = []; -%>
template Recursive1() {
    // --> Circuit public inputs <--

<%  if(vadcopInfo.nPublics > 0) { -%>
    // AIR public inputs
    signal input publics[<%- vadcopInfo.nPublics %>];
<%  } -%>

    // VADCOP inputs
    signal input challenges[<%- vadcopInfo.numChallenges.reduce((nc, acc) => nc + acc, 0) + 4 %>][3];
    signal input challengesFRISteps[<%- vadcopInfo.stepsFRI.length + 1 %>][3];

    // Merkle tree root for the fixed columns of the recursive2 circuit
    signal input rootCRecursive2[4];

    // Accumulated STARK proof data
<%- include('src/main_templates/vadcop/define_vadcop_inputs.circom.ejs', { vadcopInfo, airgroupId, prefix: "sv", starkInfo, options: { ...options, publicsNames, isInput: options.hasCompressor ? true : false  } }); %>

    // --> Circuit private inputs <--

    // --> Previous STARK proof data
<%- include('src/main_templates/define_stark_inputs.circom.ejs', { prefix: "", starkInfo, nPublics: vadcopInfo.nPublics, options: { addPublics: false } }); %>

    // --> Verify the STARK proof <--
<%- include('src/main_templates/assign_stark_inputs.circom.ejs', { componentName: "sV", prefix: "", starkInfo, nPublics: vadcopInfo.nPublics, options: { addPublics: options.hasCompressor ? false : true } }); %>
    
<%  if(!options.hasCompressor) { -%>
<%- include('src/main_templates/vadcop/init_vadcop_inputs.circom.ejs', { componentName: "sV", prefix: "sv", prefixStark: "", airgroupId, starkInfo, vadcopInfo }); %>
<%  } else { -%>
<%- include('src/main_templates/vadcop/assign_vadcop_inputs.circom.ejs', { componentName: "sV", vadcopInfo, prefix: "sv", prefixStark: "", airgroupId, options: { addPrefixAggTypes: true } }); %>
<%  } -%>
}

<%  if(!options.hasCompressor) { -%>
    component main {public [<%- vadcopInfo.nPublics > 0 ? "publics, " : "" %>challenges, challengesFRISteps, rootCRecursive2]} = Recursive1();
<%  } else { -%>
<%    if(vadcopInfo.nPublics > 0) publicsNames.push("publics"); -%>
<%    publicsNames.push(...["challenges", "challengesFRISteps", "rootCRecursive2"]); -%>
component main {public [<%- publicsNames.join(", ") %>]} = Recursive1();
<%  } -%>