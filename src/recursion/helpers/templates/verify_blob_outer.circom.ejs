<% if(isTest) { -%>
pragma circom 2.1.0;
pragma custom_templates;
<% } -%>

include "mux1.circom";
include "iszero.circom";
include "bitify.circom";

template LessEqThan(n) {
    signal input in[2];
    signal output out;

    assert(n <= 62);
    
    _ <== Num2Bits(n)(in[0]);
    _ <== Num2Bits(n)(in[1]);

    component n2b = Num2Bits(n + 1);
    n2b.in <== in[0] + (1<<n) - (in[1] + 1);
    out <== 1-n2b.out[n];    
    for (var i = 0; i < n; i++){
        _ <== n2b.out[i];
    }
}

template VerifyBlobOuter() {
    signal input publicsBlobOuter[<%- blobOuterPublics.nPublics %>];
    signal input publicsBatch[<%- batchPublics.nPublics %>];
    signal input publicsBlobInner[<%- blobInnerPublics.nPublics %>];
    signal input chainId;

    signal output isValidBlob;

    //  Indexes Batch publics
<%  for(let i = 0; i < batchPublics.definitions.length; i++) { -%>
    var batch_<%- batchPublics.definitions[i].name %>Pos = <%- batchPublics.definitions[i].initialPos %>;
<%  } -%>

    // Indexes Blob Inner publics
<%  for(let i = 0; i < blobInnerPublics.definitions.length; i++) { -%>
    var blobInner_<%- blobInnerPublics.definitions[i].name %>Pos = <%- blobInnerPublics.definitions[i].initialPos %>;
<%  } -%>

    // Indexes Blob Outer publics
<%  for(let i = 0; i < blobOuterPublics.definitions.length; i++) { -%>
    var blobOuter_<%- blobOuterPublics.definitions[i].name %>Pos = <%- blobOuterPublics.definitions[i].initialPos %>;
<%  } -%>

    // Check if the final acc batch hash data is invalid (i.e. is zero)
    signal isFinalAccBatchDataZero[8];
    for (var i=0; i<8; i++) {
        isFinalAccBatchDataZero[i] <== IsZero()(publicsBlobInner[blobInner_finalAccBatchHashDataPos + i]);
    }

    signal isInvalidFinalAccBatchHashData <== IsZero()(isFinalAccBatchDataZero[0] + isFinalAccBatchDataZero[1] + isFinalAccBatchDataZero[2] + isFinalAccBatchDataZero[3] + isFinalAccBatchDataZero[4] + isFinalAccBatchDataZero[5] + isFinalAccBatchDataZero[6] + isFinalAccBatchDataZero[7] - 8);
    
    // Check if the blob is valid (which means that isInvalid is zero and finalAccBatchData is different than zero)
    isValidBlob <== IsZero()(publicsBlobInner[blobInner_isInvalidPos] + isInvalidFinalAccBatchHashData);

    // Check that Blob and Batch are properly connected

    // Check that final acc batch data is the same as the new batch acc input hash
    for(var i=0; i<8; i++) {
        isValidBlob * (publicsBlobInner[blobInner_finalAccBatchHashDataPos + i] - publicsBatch[batch_newBatchAccInputHashPos + i]) === 0;
    }

    // Check that the L1 info tree index is correct
    signal isValidL1InfoTreeIndex <== IsZero()(publicsBatch[batch_currentL1InfoTreeIndexPos] - publicsBlobInner[blobInner_lastL1InfoTreeIndexPos]);

    // Check that the L1 info tree root is correct
    signal checkL1InfoTreeRoot <== isValidBlob * isValidL1InfoTreeIndex;
    for(var i=0; i<8; i++) {
        checkL1InfoTreeRoot * (publicsBatch[batch_currentL1InfoTreeRootPos + i] - publicsBlobInner[blobInner_lastL1InfoTreeRootPos + i]) === 0;
    }

    // Check that batch new last timestamp is less than or equal than the blob timestamp limit
    signal isValidTimestamp <== LessEqThan(62)([publicsBatch[batch_newLastTimestampPos], publicsBlobInner[blobInner_timestampLimitPos]]);

    signal isValid <== IsZero()(isValidBlob + isValidL1InfoTreeIndex + isValidTimestamp - 3);

    // Build blob outer publics

    //  Old roots
    for (var i=0; i<8; i++) {
        publicsBlobOuter[blobOuter_oldStateRootPos + i] === publicsBlobInner[blobInner_oldStateRootPos + i];
        publicsBlobInner[blobInner_oldStateRootPos + i] === publicsBatch[batch_oldStateRootPos + i];
        
        publicsBlobOuter[blobOuter_oldBlobStateRootPos + i] === publicsBlobInner[blobInner_oldBlobStateRootPos + i];

        publicsBlobOuter[blobOuter_oldBlobAccInputHashPos + i] === publicsBlobInner[blobInner_oldBlobAccInputHashPos + i];
    }

    // Old Blob Num
    publicsBlobOuter[blobOuter_oldBlobNumPos] === publicsBlobInner[blobInner_oldBlobNumPos];

    // chainId
    signal newChainId <== Mux1()([chainId, publicsBatch[batch_chainIdPos]], isValid);
    publicsBlobOuter[blobOuter_chainIdPos] === newChainId;

    // forkId
    publicsBlobOuter[blobOuter_forkIdPos] === publicsBlobInner[blobInner_forkIdPos];
    publicsBlobInner[blobInner_forkIdPos] === publicsBatch[batch_forkIdPos];

    // New roots
    signal newStateRoot[8];
    signal newLocalExitRoot[8];
    for (var i=0; i<8; i++) {
        newStateRoot[i] <== Mux1()([publicsBlobInner[blobInner_oldStateRootPos + i], publicsBatch[batch_newStateRootPos + i]], isValid);
        publicsBlobOuter[blobOuter_newStateRootPos + i] === newStateRoot[i];

        publicsBlobOuter[blobOuter_newBlobStateRootPos + i] === publicsBlobInner[blobInner_newBlobStateRootPos + i];

        publicsBlobOuter[blobOuter_newBlobAccInputHashPos + i] === publicsBlobInner[blobInner_newBlobAccInputHashPos + i];
        
        newLocalExitRoot[i] <== Mux1()([publicsBlobInner[blobInner_localExitRootFromBlobPos + i], publicsBatch[batch_newLocalExitRootPos + i]], isValid);
        publicsBlobOuter[blobOuter_newLocalExitRootPos + i] === newLocalExitRoot[i];

    }

    // New Blob num
    publicsBlobOuter[blobOuter_newBlobNumPos] === publicsBlobInner[blobInner_newBlobNumPos];
}

<% if(isTest) { -%>
component main = VerifyBlobOuter();
<% } -%>