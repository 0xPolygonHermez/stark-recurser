<%  let prefixStark_ = prefixStark ? `${prefixStark}_` : ""; -%>
<%  let prefix_ = prefix ? `${prefix}_` : ""; -%>

<%  let circuitType = vadcopInfo.aggTypes.length > 1 ? starkInfo.airId + 2 : starkInfo.airId + 1; -%>
    <%- prefix_ %>circuitType <== <%- circuitType %>;
    
<%  if(vadcopInfo.aggTypes[subproofId].length > 0) { -%>
    <%- prefix_ %>aggregationTypes <== [<%- vadcopInfo.aggTypes[subproofId].map(a => a.aggType).join(",") %>];
<%  } -%>

<%  if(vadcopInfo.aggTypes[subproofId].length > 0) { -%>
<%      for (let i = 0; i < vadcopInfo.aggTypes[subproofId].length; ++i) { -%>
    <%- prefix_ %>subproofValues[<%- i %>] <== <%- prefixStark_ %>subproofValues[<%- i %>];
<%      } -%>
<%  } -%>

<%  for (let i = 0; i < starkInfo.nStages; ++i) { -%>
    <%- prefix_ %>root<%- i+1 %> <== <%- prefixStark_ %>root<%- i+1 %>;
<%  } -%>
<%  for (let i = starkInfo.nStages; i < vadcopInfo.numChallenges.length; ++i) { -%>
    <%- prefix_ %>root<%- i+1 %> <== [0,0,0,0];
<%  } -%>

    <%- prefix_ %>root<%- starkInfo.nStages + 1 %> <== <%- prefixStark_ %>root<%- starkInfo.nStages + 1 %>;

    <%- prefix_ %>evalsHash <== CalculateEvalsHash()(<%- prefixStark_ %>evals);

<%  let friCounter = 0; -%>
<%  for(let i = 1; i < vadcopInfo.stepsFRI.length; i++) { -%>
<%     if(friCounter < starkInfo.starkStruct.steps.length - 1 && starkInfo.starkStruct.steps[friCounter].nBits === vadcopInfo.stepsFRI[i - 1].nBits) { -%>
    <%- prefix_ %>s<%- i %>_root <== <%- prefixStark_ %>s<%- ++friCounter %>_root;
<%     } else { -%>
    <%- prefix_ %>s<%- i %>_root <== [0,0,0,0];
<%     } -%>
<%  } -%>
    
    <%- prefix_ %>finalPolHash <== CalculateFinalPolHash()(<%- prefixStark_ %>finalPol);

<%  let c = 0; -%>
<%  for(let i = 0; i < vadcopInfo.numChallenges.length; ++i) { -%>
<%      for(let j = 0; j < vadcopInfo.numChallenges[i]; ++j) { -%>
<%          if(i < starkInfo.nStages && j < starkInfo.challengesMap.filter(c => c.stage == i + 1).length) { -%>
    <%- componentName %>.challengesStage<%- i + 1 %>[<%-j %>] <== challenges[<%- c++ %>];
<%          } else { -%>
<%                c++; -%>
<%          } -%>
<%      } -%>
<%  } -%>

    <%- componentName %>.challengeQ <== challenges[<%- c++ %>];
    <%- componentName %>.challengeXi <== challenges[<%- c++ %>];
    <%- componentName %>.challengesFRI[0] <== challenges[<%- c++ %>];
    <%- componentName %>.challengesFRI[1] <== challenges[<%- c++  %>];

<%  c = 0; %>
<%  for(let i = 0; i < vadcopInfo.stepsFRI.length; ++i) { -%>
<%      if(c < starkInfo.starkStruct.steps.length && starkInfo.starkStruct.steps[c].nBits === vadcopInfo.stepsFRI[i].nBits) { -%>
    <%- componentName %>.challengesFRISteps[<%- c++ %>] <== challengesFRISteps[<%- i %>];
<%      } -%>
<%  } -%>
    <%- componentName %>.challengesFRISteps[<%- starkInfo.starkStruct.steps.length %>] <== challengesFRISteps[<%- vadcopInfo.stepsFRI.length %>];
    
    <%- prefix_ %>rootC <== <%- componentName %>.rootC;