    <%- prefix %>_aggregationTypes <== aggregationTypes;
    signal {binary} aggTypes[<%- vadcopInfo.aggTypes[subproofId].length  %>];
    for(var i = 0; i < <%- vadcopInfo.aggTypes[subproofId].length  %>; i++) {
        <%- prefix %>_aggregationTypes[i] * (<%- prefix %>_aggregationTypes[i] - 1) === 0;
        aggTypes[i] <== <%- prefix %>_aggregationTypes[i];
    }
<%  if(vadcopInfo.aggTypes.length > 1) { -%>
    for(var i = 0; i < <%- vadcopInfo.aggTypes[subproofId].length %>; i++) {
        <%- prefix %>_subproofValues[i] <== AggregateSubproofValuesNull()(<%- prefix1 %>_subproofValues[i], <%- prefix2 %>_subproofValues[i], aggTypes[i], <%- prefix1%>_isNull, <%- prefix2%>_isNull);
    }

    <%- prefix %>_rootC <== AggregateValuesNull()(<%- prefix1 %>_rootC, <%- prefix2 %>_rootC, <%- prefix1%>_isNull, <%- prefix2%>_isNull);

<%  for (let i = 0; i < vadcopInfo.numChallenges.length + 1; ++i) { -%>
        <%- prefix %>_root<%- i+1 %> <== AggregateValuesNull()(<%- prefix1 %>_root<%- i+1 %>, <%- prefix2 %>_root<%- i+1 %>, <%- prefix1%>_isNull, <%- prefix2%>_isNull);
<%  } -%>

    <%- prefix %>_evalsHash <== AggregateValuesNull()(<%- prefix1 %>_evalsHash, <%- prefix2 %>_evalsHash, <%- prefix1%>_isNull, <%- prefix2%>_isNull);
<%      for(let i = 1; i < vadcopInfo.stepsFRI.length; i++) { -%>
    <%- prefix %>_s<%- i %>_root <== AggregateValuesNull()(<%- prefix1 %>_s<%- i %>_root, <%- prefix2 %>_s<%- i %>_root, <%- prefix1%>_isNull, <%- prefix2%>_isNull);
<%  } -%>
<%- prefix %>_finalPolHash <== AggregateValuesNull()(<%- prefix1 %>_finalPolHash, <%- prefix2 %>_finalPolHash, <%- prefix1%>_isNull, <%- prefix2%>_isNull);
<%  } else { -%>
    for(var i = 0; i < <%- vadcopInfo.aggTypes[subproofId].length %>; i++) {
        <%- prefix %>_subproofValues[i] <== AggregateSubproofValues()(<%- prefix1 %>_subproofValues[i], <%- prefix2 %>_subproofValues[i], aggTypes[i]);
    }

    <%- prefix %>_rootC <== AggregateValues()(<%- prefix1 %>_rootC, <%- prefix2 %>_rootC);

<%  for (let i = 0; i < vadcopInfo.numChallenges.length + 1; ++i) { -%>
        <%- prefix %>_root<%- i+1 %> <== AggregateValues()(<%- prefix1 %>_root<%- i+1 %>, <%- prefix2 %>_root<%- i+1 %>);
<%  } -%>

    <%- prefix %>_evalsHash <== AggregateValues()(<%- prefix1 %>_evalsHash, <%- prefix2 %>_evalsHash);
<%      for(let i = 1; i < vadcopInfo.stepsFRI.length; i++) { -%>
    <%- prefix %>_s<%- i %>_root <== AggregateValues()(<%- prefix1 %>_s<%- i %>_root, <%- prefix2 %>_s<%- i %>_root);
<%  } -%>
    <%- prefix %>_finalPolHash <== AggregateValues()(<%- prefix1 %>_finalPolHash, <%- prefix2 %>_finalPolHash);
<%  } -%>