<%  let signalType = isInput ? "input" : "output" -%>
<%  let prefix_ = prefix ? `${prefix}_` : ""; -%>

    signal <%- signalType %> <%- prefix_ %>circuitType;
    signal <%- signalType %> <%- prefix_ %>aggregationTypes[<%- vadcopInfo.aggTypes[subproofId].length  %>];
    signal <%- signalType %> <%- prefix_ %>subproofValues[<%- vadcopInfo.aggTypes[subproofId].length  %>];

    signal <%- signalType %> <%- prefix_ %>rootC[4];

<% if(Array.isArray(publicsNames)) publicsNames.push(...[`${prefix_}circuitType`, `${prefix_}aggregationTypes`, `${prefix_}subproofValues`, `${prefix_}rootC`]) -%>

<%  for (let i = 0; i < vadcopInfo.nStages + 1; ++i) { -%>
    signal <%- signalType %> <%- prefix_ %>root<%- i + 1 %>[4];
<%    if(Array.isArray(publicsNames)) publicsNames.push(`${prefix_}root${i + 1}`) -%>
<%  } -%>

    signal <%- signalType %> <%- prefix_ %>evalsHash[4];
<%  if(Array.isArray(publicsNames)) publicsNames.push(`${prefix_}evalsHash`) -%>

<%  for(let i = 1; i < vadcopInfo.stepsFRI.length; i++) { -%>
    signal <%- signalType %> <%- prefix_ %>s<%- i %>_root[4];
<%    if(Array.isArray(publicsNames)) publicsNames.push(`${prefix_}s${i}_root`) -%>
<%  } -%>

    signal <%- signalType %> <%- prefix_ %>finalPolHash[4];
<%  if(Array.isArray(publicsNames)) publicsNames.push(`${prefix_}finalPolHash`) -%>
