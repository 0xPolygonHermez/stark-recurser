<%  let prefix_ = prefix !== "" ? `${prefix}_` : ""; -%>
<%  if(options.addPublics && nPublics > 0) { -%>
    signal input <%- prefix_ %>publics[<%- nPublics %>];
<%  } -%>

<%  if(starkInfo.airValuesMap && starkInfo.airValuesMap.length > 0) { -%>
    signal input <%- prefix_ %>airvalues[<%- starkInfo.airValuesMap.length %>][3];
<%  } -%>

<%  if(starkInfo.airgroupValuesMap && starkInfo.airgroupValuesMap.length > 0) { -%>
    signal input <%- prefix_ %>airgroupValues[<%- starkInfo.airgroupValuesMap.length %>][3];
<%  } -%>

<%  if(starkInfo.proofValuesMap && starkInfo.proofValuesMap.length > 0) { -%>
    signal input <%- prefix_ %>proofvalues[<%- starkInfo.proofValuesMap.length %>][3];
<%  } -%>

    // Merkle tree roots of the witness columns at each stage
<%  for (let s=1; s<=starkInfo.nStages + 1; ++s) { -%>
<%    if(starkInfo.starkStruct.verificationHashType === "BN128") { -%>
    signal input <%- prefix_ %>root<%- s %>;
<%    } else { -%>
    signal input <%- prefix_ %>root<%- s %>[4];
<%    } -%>
<%  } -%>

    // Set of evaluations around the out-of-domain sample
    signal input <%- prefix_ %>evals[<%- starkInfo.evMap.length %>][3];

    // Merkle tree roots of the FRI polynomials for each layer during the commit phase
<% for (let s=1; s<starkInfo.starkStruct.steps.length; s++) {   -%>
<%    if(starkInfo.starkStruct.verificationHashType === "BN128") { -%>
    signal input <%- prefix_ %>s<%- s %>_root;
<%    } else { -%>
    signal input <%- prefix_ %>s<%- s %>_root[4];
<%    } -%>
<% } -%>

    // Polynomial sent in clear in the last iteration of the FRI commit phase
    signal input <%- prefix_ %>finalPol[<%- 1 << parseInt(starkInfo.starkStruct.steps[starkInfo.starkStruct.steps.length-1].nBits) %>][3];

    // Set of evaluations and Merkle proofs for each of the <%- starkInfo.starkStruct.nQueries %> queries 
    // performed during the FRI query phase, covering all involved polynomials.
    signal input <%- prefix_ %>s0_valsC[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.nConstants %>];
<%  if(starkInfo.starkStruct.verificationHashType === "BN128") { -%>
    signal input <%- prefix_ %>s0_siblingsC[<%- starkInfo.starkStruct.nQueries %>][<%- Math.floor((parseInt(starkInfo.starkStruct.steps[0].nBits) - 1)/Math.log2(starkInfo.starkStruct.merkleTreeArity))+1 %>][<%- starkInfo.starkStruct.merkleTreeArity %>];
<%  } else { -%>
    signal input <%- prefix_ %>s0_siblingsC[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.starkStruct.steps[0].nBits %>][4];
<%  } -%>

<%  for(let i = 0; i < starkInfo.customCommits.length; ++i) { -%>
    signal input <%- prefix_ %>s0_vals_<%- starkInfo.customCommits[i].name %>_0[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.customCommits[i].stageWidths[0] %>];
<%  if(starkInfo.starkStruct.verificationHashType === "BN128") { -%>
    signal input <%- prefix_ %>s0_siblings_<%- starkInfo.customCommits[i].name %>_0[<%- starkInfo.starkStruct.nQueries %>][<%- Math.floor((parseInt(starkInfo.starkStruct.steps[0].nBits) - 1)/Math.log2(starkInfo.starkStruct.merkleTreeArity))+1 %>][<%- starkInfo.starkStruct.merkleTreeArity %>];
<%  } else { -%>
    signal input <%- prefix_ %>s0_siblings_<%- starkInfo.customCommits[i].name %>_0[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.starkStruct.steps[0].nBits %>][4];
<%  } -%>
<%  } -%>

<%  for (let s=1; s<=starkInfo.nStages + 1; ++s) { -%>
<%      if (starkInfo.mapSectionsN[`cm${s}`] > 0) { -%>
    signal input <%- prefix_ %>s0_vals<%- s %>[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.mapSectionsN[`cm${s}`] %>];
<%          if(starkInfo.starkStruct.verificationHashType === "BN128") { -%>    
    signal input <%- prefix_ %>s0_siblings<%- s %>[<%- starkInfo.starkStruct.nQueries %>][<%- Math.floor((parseInt(starkInfo.starkStruct.steps[0].nBits) - 1)/Math.log2(starkInfo.starkStruct.merkleTreeArity))+1 %>][<%- starkInfo.starkStruct.merkleTreeArity %>];
<%          } else { -%>
    signal input <%- prefix_ %>s0_siblings<%- s %>[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.starkStruct.steps[0].nBits %>][4];
<%          } -%>
<%      } -%>
<% } -%>

<% for (let s=1; s< starkInfo.starkStruct.steps.length; s++) {   -%>
    signal input <%- prefix_ %>s<%- s %>_vals[<%- starkInfo.starkStruct.nQueries %>][<%- (1 << parseInt(starkInfo.starkStruct.steps[s-1].nBits - starkInfo.starkStruct.steps[s].nBits))*3 %>];
<%          if(starkInfo.starkStruct.verificationHashType === "BN128") { -%>    
    signal input <%- prefix_ %>s<%- s %>_siblings[<%- starkInfo.starkStruct.nQueries %>][<%- Math.floor((parseInt(starkInfo.starkStruct.steps[s].nBits) -1) /Math.log2(starkInfo.starkStruct.merkleTreeArity)) +1 %>][<%- starkInfo.starkStruct.merkleTreeArity %>];
<%          } else { -%>
    signal input <%- prefix_ %>s<%- s %>_siblings[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.starkStruct.steps[s].nBits %>][4];
<%          } -%>
<% } -%>
-%>