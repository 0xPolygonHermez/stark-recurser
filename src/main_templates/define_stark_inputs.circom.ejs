<%  let prefix_ = prefix !== "" ? `${prefix}_` : ""; -%>
    signal input <%- prefix_ %>publics[<%- nPublics %>];
<%  if(starkInfo.suproofValuesMap && starkInfo.subproofValuesMap.length > 0) { -%>
    signal input <%- prefix_ %>subproofValues[<%- starkInfo.subproofValuesMap.length %>];
<%  } -%>

<%  for (let s=1; s<=starkInfo.nStages + 1; ++s) { -%>
<%    if(starkInfo.starkStruct.verificationHashType === "BN128") { -%>
    signal input <%- prefix_ %>root<%- s %>;
<%    } else { -%>
    signal input <%- prefix_ %>root<%- s %>[4];
<%    } -%>
<%  } -%>

    signal input <%- prefix_ %>evals[<%- starkInfo.evMap.length %>][3]; // Evaluations of the set polynomials at a challenge value z and gz

    signal input <%- prefix_ %>s0_valsC[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.nConstants %>];
<%  if(starkInfo.starkStruct.verificationHashType === "BN128") { -%>
    signal input <%- prefix_ %>s0_siblingsC[<%- starkInfo.starkStruct.nQueries %>][<%- Math.floor((parseInt(starkInfo.starkStruct.steps[0].nBits) - 1)/Math.log2(starkInfo.starkStruct.merkleTreeArity))+1 %>][<%- starkInfo.starkStruct.merkleTreeArity %>];
<%  } else { -%>
    signal input <%- prefix_ %>s0_siblingsC[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.starkStruct.steps[0].nBits %>][4];
<%  } -%>


<%  for (let s=1; s<=starkInfo.nStages + 1; ++s) { -%>
<%      if (starkInfo.mapSectionsN[`cm${s}`] > 0) { -%>
    signal input <%- prefix_ %>s0_vals<%- s %>[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.mapSectionsN[`cm${s}`] %>];
<%          if(starkInfo.starkStruct.verificationHashType === "BN128") { -%>    
    signal input <%- prefix_ %>s0_siblings<%- s %>[<%- starkInfo.starkStruct.nQueries %>][<%- Math.floor((parseInt(starkInfo.starkStruct.steps[0].nBits) - 1)/Math.log2(starkInfo.starkStruct.merkleTreeArity))+1 %>][<%- starkInfo.starkStruct.merkleTreeArity %>];
<%          } else { -%>
    signal input <%- prefix_ %>s0_siblings<%- s %>[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.starkStruct.steps[0].nBits %>][4];
<%          } -%>
<%      } -%>
<% } -%>

<% for (let s=1; s<starkInfo.starkStruct.steps.length; s++) {   -%>
<%    if(starkInfo.starkStruct.verificationHashType === "BN128") { -%>
    signal input <%- prefix_ %>s<%- s %>_root;
<%    } else { -%>
    signal input <%- prefix_ %>s<%- s %>_root[4];
<%    } -%>
<% }                                                  -%>

<% for (let s=1; s< starkInfo.starkStruct.steps.length; s++) {   -%>
    signal input <%- prefix_ %>s<%- s %>_vals[<%- starkInfo.starkStruct.nQueries %>][<%- (1 << parseInt(starkInfo.starkStruct.steps[s-1].nBits - starkInfo.starkStruct.steps[s].nBits))*3 %>];
<%          if(starkInfo.starkStruct.verificationHashType === "BN128") { -%>    
    signal input <%- prefix_ %>s<%- s %>_siblings[<%- starkInfo.starkStruct.nQueries %>][<%- Math.floor((parseInt(starkInfo.starkStruct.steps[s].nBits) -1) /Math.log2(starkInfo.starkStruct.merkleTreeArity)) +1 %>][<%- starkInfo.starkStruct.merkleTreeArity %>];
<%          } else { -%>
    signal input <%- prefix_ %>s<%- s %>_siblings[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.starkStruct.steps[s].nBits %>][4];
<%          } -%>
<% }                                                  -%>

    signal input <%- prefix_ %>finalPol[<%- 1 << parseInt(starkInfo.starkStruct.steps[starkInfo.starkStruct.steps.length-1].nBits) %>][3];